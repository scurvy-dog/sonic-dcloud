---

# ansible-playbook -i hosts lab_deploy-playbook.yml -e "ansible_user=cisco ansible_ssh_pass=cisco123 ansible_sudo_pass=cisco123" -vv
      
- name: Start logging to deploy.log file
  hosts: localhost
  become: false
  tasks:
    - name: delete old deploy log 
      command: rm /home/cisco/deploy.log
      ignore_errors: yes
      run_once: true
      become: false
      delegate_to: localhost
      
    - name: deploy.log start message
      become: false
      lineinfile:
        path: "/home/cisco/deploy.log"
        line: "{{ ansible_date_time.date }} {{ansible_date_time.time}} {{ansible_date_time.tz}}: Start Containerlab Deploy Script"
        create: yes
      delegate_to: localhost
      
    - name: deploy.log time to spin up
      become: false
      lineinfile:
        path: "/home/cisco/deploy.log"
        line: "{{ ansible_date_time.date }} {{ansible_date_time.time}} {{ansible_date_time.tz}}: Expect 10+ minutes as VXR scripts build out SONiC routers"
        create: yes
      delegate_to: localhost
      
- name: Setup lab and deploy SONiC containerlab nodes
  hosts: sonic_host_vms
  become: true
  tasks:
    - name: git pull to update repo on each VM
      command: git pull
      args:
        chdir: /home/cisco/sonic-dcloud
      ignore_errors: yes
      
    - name: Copy motd file to remote vm
      copy:
        src: "motd"
        dest: "/etc/motd"
        mode: 0644 

    - name: Log SONiC Router Deploy Start
      become: false
      lineinfile:
        path: "/home/cisco/deploy.log"
        line: "{{ ansible_date_time.date }} {{ansible_date_time.time}} {{ansible_date_time.tz}}: SONiC Router {{ hostvars[inventory_hostname]['sonic_rtr'] }} build start "
        create: yes
      delegate_to: localhost
      
    - name: run containerlab deploy on linux host VMs to launch sonic 8000 emulator nodes
      command: sudo containerlab deploy -t "{{ inventory_hostname }}/clab.yml"
      args:
        chdir: /home/cisco/sonic-dcloud/1-SONiC_101/ansible/files/
      ignore_errors: yes

    - name: run vxlan shell script to interconnect containerlab nodes across linux host VMs
      command: "{{ inventory_hostname }}/vxlan.sh"
      args:
        chdir: /home/cisco/sonic-dcloud/1-SONiC_101/ansible/files/
      ignore_errors: yes

    - name: reset user/group permissions on repo folders 
      command: "chown -R cisco:cisco /home/cisco/sonic-dcloud"
      ignore_errors: yes

    - name: clear old ssh keys 
      command: "rm .ssh/known_hosts"
      args:
        chdir: /home/cisco/
      ignore_errors: yes

    - name: Pause for 5 minutes
      pause:
        minutes: 5

    - name: Wait for 'Router up' or 'Router failed' message to appear in logs
      shell: docker logs -t {{ hostvars[inventory_hostname]['container'] }} | grep Router
      register: grep_result
      until: grep_result.stdout_lines | length > 0
      async: 720
      poll: 0
      
    - name: Wait for docker logs to complete
      async_status:
        jid: "{{ grep_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 24  # Adjust the number of retries as needed
      delay: 30    # Adjust the delay between retries as needed
      delegate_to: localhost

    - name: Save grep output to jumpbox deploy.log file
      lineinfile:
        path: "/home/cisco/deploy.log"
        line: "{{ ansible_date_time.date }} {{ansible_date_time.time}} {{ansible_date_time.tz}}: SONiC Router {{ inventory_hostname }} {{ item.stdout }}"
        create: yes
      with_items: "{{ job_result.results }}"
      delegate_to: localhost
      when: item.stdout | length > 0

    # - name: Wait for 'Router up' or 'Router failed' message to appear in logs
    #   shell: docker logs -t {{ hostvars[inventory_hostname]['container'] }} | grep Router
    #   register: grep_result
    #   until: grep_result.stdout_lines | length > 0
    #   retries: 18  # Number of times to retry
    #   delay: 30  # Delay between retries
    #   timeout: 600  # Maximum time to wait (in seconds) 
    #   delegate_to: localhost
      
    # - name: Save grep output to a local log file
    #   become: false
    #   lineinfile:
    #     path: "/home/cisco/deploy.log"
    #     line: "{{ ansible_date_time.date }} {{ansible_date_time.time}} {{ansible_date_time.tz}}: SONiC Router {{ hostvars[inventory_hostname]['container'] }} {{ grep_result.stdout }}"
    #     create: yes
    #   delegate_to: localhost

- name: run health check playbook
  import_playbook: sonic_node_health_check.yml
  ignore_errors: yes

- name: Setup lab and deploy endpoint nodes
  hosts: endpoint_vms
  become: true
  tasks:
    - name: Copy motd file to remote vm
      copy:
        src: "motd"
        dest: "/etc/motd"
        mode: 0644 
